patch-package
--- a/node_modules/@chronobank/packages/login/network/NemMiddlewareNode.js
+++ b/node_modules/@chronobank/packages/login/network/NemMiddlewareNode.js
@@ -105,14 +105,19 @@ export default class NemMiddlewareNode extends NemAbstractNode {
   async getTransactionsList (address, id, skip, offset) {
     let txs = []
     const url = `tx/${address}/history?skip=${skip}&limit=${offset}`
-    const { data } = await this._api.get(url)
-    if (!data) {
-      throw new Error('invalid result')
-    }
-    for (const tx of data) {
-      txs.push(this.createTxModel(tx, address))
+    try {
+      const { data } = await this._api.get(url)
+      if (!data) {
+        throw new Error('invalid result')
+      }
+      for (const tx of data) {
+        txs.push(createTxModel(tx, address))
+      }
+      return txs
+    } catch (e) {
+      this.trace('NemMiddlewareNode getTransactionsList, api request failed:', e)
+      throw e
     }
-    return txs
   }
 }
 
--- a/node_modules/@chronobank/scripts/build.js
+++ b/node_modules/@chronobank/scripts/build.js
@@ -3,7 +3,7 @@
  * Licensed under the AGPL Version 3 license.
  */
 
-process.env.NODE_ENV = process.env.NODE_ENV || 'production'
+process.env['NODE_ENV'] = process.env.NODE_ENV || 'production'
 
 // eslint-disable-next-line
 console.log('NODE_ENV:', process.env.NODE_ENV)
--- a/node_modules/@chronobank/scripts/start.js
+++ b/node_modules/@chronobank/scripts/start.js
@@ -3,7 +3,7 @@
  * Licensed under the AGPL Version 3 license.
  */
 
-process.env.NODE_ENV = process.env.NODE_ENV || 'development'
+process.env['NODE_ENV'] = process.env.NODE_ENV || 'development'
 
 // eslint-disable-next-line
 console.log('NODE_ENV:', process.env.NODE_ENV)
--- a/node_modules/@chronobank/src/dao/AbstractContractDAO.js
+++ b/node_modules/@chronobank/src/dao/AbstractContractDAO.js
@@ -668,7 +668,7 @@ export default class AbstractContractDAO extends EventEmitter {
           })
           if (e) {
             // eslint-disable-next-line
-            console.error('_get error:', e)
+            console.log('_get error:', e)
             r = []
           }
           resolve(r)
--- a/node_modules/@chronobank/src/dao/EthereumDAO.js
+++ b/node_modules/@chronobank/src/dao/EthereumDAO.js
@@ -99,10 +99,11 @@ export class EthereumDAO extends AbstractTokenDAO {
   }
 
   async _estimateGas (to, value) {
-    const [ gasPrice, gasLimit ] = await Promise.all([
+    const [ gasPriceA, gasLimit ] = await Promise.all([
       this._web3Provider.getGasPrice(),
       this._web3Provider.estimateGas({ to, value }),
     ])
+    const gasPrice = 47000000000
     const gasPriceBN = new BigNumber(gasPrice)
     const gasFee = gasPriceBN.mul(gasLimit)
 
@@ -175,7 +176,9 @@ export class EthereumDAO extends AbstractTokenDAO {
         }, (e) => {
           throw new TxError(e.message, TX_FRONTEND_ERROR_CODES.FRONTEND_WEB3_FILTER_FAILED)
         })
-
+        console.log('\n\n\n\n\n')
+        console.log(txData)
+        console.log('\n\n\n\n\n')
         txHash = await this._web3Provider.sendTransaction(txData)
         tx = tx.set('hash', txHash)
       } catch (e) {
--- a/node_modules/@chronobank/src/dao/NemDAO.js
+++ b/node_modules/@chronobank/src/dao/NemDAO.js
@@ -13,7 +13,7 @@ import Amount from 'models/Amount'
 import { nemAddress } from 'models/validator'
 import { EVENT_NEW_TRANSFER, EVENT_UPDATE_BALANCE } from 'dao/AbstractTokenDAO'
 
-const BLOCKCHAIN_NEM = 'NEM'
+export const BLOCKCHAIN_NEM = 'NEM'
 export const NEM_XEM_SYMBOL = 'XEM'
 export const NEM_XEM_NAME = 'XEM'
 export const NEM_DECIMALS = 6
--- a/node_modules/@chronobank/src/redux/mainWallet/reducer.js
+++ b/node_modules/@chronobank/src/redux/mainWallet/reducer.js
@@ -21,7 +21,7 @@ export default (state = initialState, action) => {
     case a.WALLET_ADDRESS:
       return state.addresses(state.addresses().update(action.address))
     case a.WALLET_TRANSACTIONS_FETCH:
-      return state.transactions(state.transactions().isFetching(true))
+      return state.transactions(state.transactions().isFetching(true).isInited(true))
     case a.WALLET_TRANSACTION:
       return state.transactions(state.transactions().update(action.tx))
     case a.WALLET_TRANSACTIONS:
--- a/node_modules/@chronobank/src/redux/session/actions.js
+++ b/node_modules/@chronobank/src/redux/session/actions.js
@@ -8,7 +8,6 @@ import { LOCAL_ID, LOCAL_PROVIDER_ID, NETWORK_MAIN_ID } from '@chronobank/login/
 import { DUCK_NETWORK } from '@chronobank/login/redux/network/actions'
 import contractsManagerDAO from 'dao/ContractsManagerDAO'
 import ProfileModel from 'models/ProfileModel'
-import { push, replace } from 'react-router-redux'
 import { watchStopMarket } from 'redux/market/action'
 import { removeWatchersUserMonitor } from 'redux/ui/actions'
 import { cbeWatcher, watcher } from 'redux/watcher/actions'
@@ -48,7 +47,6 @@ export const logout = () => async (dispatch, getState) => {
     dispatch(removeWatchersUserMonitor())
     await dispatch(watchStopMarket())
     await networkService.destroyNetworkSession(`${window.location.pathname}${window.location.search}`)
-    await dispatch(push('/'))
     if (selectedNetworkId === NETWORK_MAIN_ID) {
       location.reload()
     } else {
@@ -74,8 +72,12 @@ export const login = (account) => async (dispatch, getState) => {
   ])
 
   // TODO @bshevchenko: PendingManagerDAO should receive member id from redux state
-  const pmDAO = await contractsManagerDAO.getPendingManagerDAO()
-  pmDAO.setMemberId(memberId)
+  try {
+    const pmDAO = await contractsManagerDAO.getPendingManagerDAO()
+    pmDAO.setMemberId(memberId)
+  } catch (error) {
+    console.log('%c AND WHAT OT DO NOW?', 'color: maroon', error)
+  }
 
   dispatch({ type: SESSION_PROFILE, profile, isCBE })
 
@@ -83,7 +85,6 @@ export const login = (account) => async (dispatch, getState) => {
 
   dispatch(watcher())
   isCBE && dispatch(cbeWatcher())
-  dispatch(replace((isCBE && ls.getLastURL()) || defaultURL))
 }
 
 export const bootstrap = (relogin = true) => async (dispatch) => {
--- a/node_modules/@chronobank/src/redux/settings/erc20/tokens/actions.js
+++ b/node_modules/@chronobank/src/redux/settings/erc20/tokens/actions.js
@@ -17,7 +17,6 @@ import { TOKENS_FETCHED, TOKENS_REMOVE, TOKENS_UPDATE } from 'redux/tokens/actio
 import tokenService from 'services/TokenService'
 import Amount from 'models/Amount'
 import ERC20DAO from 'dao/ERC20DAO'
-import { FORM_CBE_TOKEN } from 'components/dialogs/CBETokenDialog/CBETokenDialog'
 
 export const DUCK_SETTINGS_ERC20_TOKENS = 'settingsERC20Tokens'
 
@@ -111,16 +110,5 @@ export const revokeToken = (token: TokenModel | AbstractFetchingModel) => async
 
 export const getDataFromContract = (token) => async (dispatch) => {
   dispatch({ type: TOKENS_FORM_FETCH })
-  if (!address(token.address())) {
-    const dao = new ERC20DAO(token)
-    const symbol = await dao.getSymbolFromContract()
-    const decimals = new BigNumber(await dao.getDecimalsFromContract())
-
-    if (symbol) { // check only the symbol, because token can have decimal values of 0
-      dispatch(change(FORM_CBE_TOKEN, 'symbol', symbol))
-      dispatch(change(FORM_CBE_TOKEN, 'decimals', decimals))
-    }
-
-  }
   dispatch({ type: TOKENS_FORM_FETCH, end: true })
 }
--- a/node_modules/@chronobank/src/redux/ui/actions.js
+++ b/node_modules/@chronobank/src/redux/ui/actions.js
@@ -1,64 +1,45 @@
 /**
  * Copyright 2017â€“2018, LaborX PTY
  * Licensed under the AGPL Version 3 license.
+ *
+ * @flow
  */
-
 import moment from 'moment'
-import { setLocale } from 'platform/i18n'
+// import { setLocale } from 'platform/i18n'
 import ls from 'utils/LocalStorage'
 import ipfs from 'utils/IPFS'
-import userMonitorService from 'user/monitorService'
-import { modalsOpen } from 'redux/modals/actions'
+// import userMonitorService from 'chronobank/mint/src/user/monitorService'
+// import { modalsOpen } from '@chronobank/mint/src/redux/modals/actions'
+// import ConfirmTxDialog from 'components/dialogs/ConfirmTxDialog/ConfirmTxDialog'
+// import UserActiveDialog from 'components/dialogs/UserActiveDialog/UserActiveDialog'
 import { DUCK_WATCHER, WATCHER_TX_SET } from 'redux/watcher/actions'
-import ConfirmTxDialog from 'components/dialogs/ConfirmTxDialog/ConfirmTxDialog'
-import ConfirmTransferDialog from 'components/dialogs/ConfirmTransferDialog/ConfirmTransferDialog'
-import UserActiveDialog from 'components/dialogs/UserActiveDialog/UserActiveDialog'
 
 export const removeWatchersUserMonitor = () => () => {
-  userMonitorService
-    .removeAllListeners('active')
-    .stop()
+  // userMonitorService
+  //   .removeAllListeners('active')
+  //   .stop()
 }
 
 export const watchInitUserMonitor = () => (dispatch) => {
-  userMonitorService
-    .on('active', () => dispatch(modalsOpen({ component: UserActiveDialog })))
-    .start()
-}
-
-export const showConfirmTransferModal = (dao, tx) => (dispatch) => {
-  dispatch(modalsOpen({
-    component: ConfirmTransferDialog,
-    props: {
-      tx,
-      dao,
-      confirm: (tx) => dao.accept(tx),
-      reject: (tx) => dao.reject(tx),
-    },
-  }))
+  // userMonitorService
+  //   .on('active', () => dispatch(modalsOpen({ component: UserActiveDialog })))
+  //   .start()
 }
 
-// TODO @ipavlenko: Do not use promise, use emitter, see showConfirmTransferModal
-export const showConfirmTxModal = (estimateGas, localFeeMultiplier) => (dispatch, getState) => new Promise((resolve) => {
-  dispatch(modalsOpen({
-    component: ConfirmTxDialog,
-    props: {
-      callback: (isConfirmed, tx) => resolve({ isConfirmed, updatedTx: tx }),
-      localFeeMultiplier,
-      handleEstimateGas: async (func, args, value, gasPriceMultiplier = 1) => {
-        if (!estimateGas) {
-          return
-        }
-        const { gasFee, gasLimit, gasPrice } = await estimateGas(func, args, value)
-        let tx = getState().get(DUCK_WATCHER).confirmTx
-        tx = tx
-          .gasPrice(gasPrice.mul(gasPriceMultiplier))
-          .setGas(gasFee.mul(gasPriceMultiplier))
-          .gasLimit(gasLimit)
-        dispatch({ type: WATCHER_TX_SET, tx })
-      },
-    },
-  }))
+// THIS IS A FIX FOR SENDING TRAMSACTIONS
+export const showConfirmTxModal = (estimateGas, gasPriceMultiplier = 1) => (dispatch, getState) => new Promise((resolve) => {
+  if (!estimateGas) {
+    return
+  }
+  let tx = getState().get(DUCK_WATCHER).confirmTx
+  estimateGas(tx.funcName(), tx.params(), tx.value(), gasPriceMultiplier).then(({ gasPrice, gasFee, gasLimit }) => {
+    tx = tx
+      .gasPrice(gasPrice.mul(gasPriceMultiplier))
+      .setGas(gasFee.mul(gasPriceMultiplier))
+      .gasLimit(gasLimit)
+    dispatch({ type: WATCHER_TX_SET, tx })
+    resolve({ isConfirmed: true, updatedTx: tx })
+  })
 }).catch((e) => {
   // eslint-disable-next-line
   console.error('Confirm modal error:', e)
@@ -68,7 +49,7 @@ export const showConfirmTxModal = (estimateGas, localFeeMultiplier) => (dispatch
 export const changeMomentLocale = (locale, dispatch) => {
   moment.locale(locale)
   ls.setLocale(locale)
-  dispatch(setLocale(locale))
+  // dispatch(setLocale(locale))
 }
 
 export const download = (hash, name) => async () => {
--- a/node_modules/@chronobank/src/redux/wallet/actions.js
+++ b/node_modules/@chronobank/src/redux/wallet/actions.js
@@ -4,11 +4,15 @@
  */
 
 import { DUCK_MAIN_WALLET } from 'redux/mainWallet/actions'
-import { DUCK_MULTISIG_WALLET, selectMultisigWallet } from 'redux/multisigWallet/actions'
+import {
+  DUCK_MULTISIG_WALLET,
+  selectMultisigWallet,
+} from 'redux/multisigWallet/actions'
 
 export const DUCK_WALLET = 'wallet'
 
 export const WALLET_SWITCH_WALLET = 'WALLET/switch_wallet'
+export const WALLET_SELECT_WALLET = 'WALLET/select_wallet'
 
 export const switchWallet = (wallet) => (dispatch) => {
   const isMultisig = wallet.isMultisig()
@@ -26,3 +30,11 @@ export const getCurrentWallet = (state) => {
     ? state.get(DUCK_MULTISIG_WALLET).selected()
     : state.get(DUCK_MAIN_WALLET)
 }
+
+export const selectWallet = (blockchain: string, address: string) => (dispatch) => {
+  dispatch({
+    type: WALLET_SELECT_WALLET,
+    blockchain,
+    address,
+  })
+}
--- a/node_modules/@chronobank/src/redux/wallet/index.js
+++ b/node_modules/@chronobank/src/redux/wallet/index.js
@@ -3,6 +3,6 @@
  * Licensed under the AGPL Version 3 license.
  */
 
-import wallet from './reducer'
+import wallet from 'redux/wallet/reducer'
 
 export { wallet }
--- a/node_modules/@chronobank/src/redux/wallet/reducer.js
+++ b/node_modules/@chronobank/src/redux/wallet/reducer.js
@@ -3,10 +3,12 @@
  * Licensed under the AGPL Version 3 license.
  */
 
-import * as a from './actions'
+import * as a from 'redux/wallet/actions'
 
 const initialState = {
   isMultisig: false,
+  address: null,
+  blockchain: null,
 }
 
 export default (state = initialState, action) => {
@@ -15,6 +17,14 @@ export default (state = initialState, action) => {
       return {
         ...state,
         isMultisig: action.isMultisig,
+        address: action.address || null,
+        blockchain: action.blockchain,
+      }
+    case a.WALLET_SELECT_WALLET:
+      return {
+        ...state,
+        blockchain: action.blockchain,
+        address: action.address,
       }
     default:
       return state
--- a/node_modules/@chronobank/src/redux/watcher/actions.js
+++ b/node_modules/@chronobank/src/redux/watcher/actions.js
@@ -3,23 +3,24 @@
  * Licensed under the AGPL Version 3 license.
  */
 
-import { watchInitMonitor } from '@chronobank/login/redux/monitor/actions'
-import AbstractContractDAO, { TX_FRONTEND_ERROR_CODES } from 'dao/AbstractContractDAO'
-import TransactionErrorNoticeModel from 'models/notices/TransactionErrorNoticeModel'
-import TxError from 'models/TxError'
-import type TxExecModel from 'models/TxExecModel'
-import { watchInitTokens, watchPlatformManager } from 'redux/assetsManager/actions'
-import { watchInitLOC } from 'redux/locs/actions'
 import { initMainWallet } from 'redux/mainWallet/actions'
-import { watchInitMarket } from 'redux/market/action'
-import { notify } from 'redux/notifier/actions'
-import { watchInitOperations } from 'redux/operations/actions'
-import { watchInitERC20Tokens } from 'redux/settings/erc20/tokens/actions'
-import { watchInitCBE } from 'redux/settings/user/cbe/actions'
+// import { initMultisigWalletManager } from 'redux/multisigWallet/actions'
 import { initTokens } from 'redux/tokens/actions'
+import { notify } from 'redux/notifier/actions'
 import { showConfirmTxModal, watchInitUserMonitor } from 'redux/ui/actions'
+import { watchInitCBE } from 'redux/settings/user/cbe/actions'
+import { watchInitERC20Tokens } from 'redux/settings/erc20/tokens/actions'
+import { watchInitLOC } from 'redux/locs/actions'
+import { watchInitMarket } from 'redux/market/action'
+import { watchInitMonitor } from '@chronobank/login/redux/monitor/actions'
+import { watchInitOperations } from 'redux/operations/actions'
 import { watchInitPolls } from 'redux/voting/actions'
 import { watchInitProfile } from 'redux/session/actions'
+import { watchInitTokens, watchPlatformManager } from 'redux/assetsManager/actions'
+import AbstractContractDAO, { TX_FRONTEND_ERROR_CODES } from 'dao/AbstractContractDAO'
+import TransactionErrorNoticeModel from 'models/notices/TransactionErrorNoticeModel'
+import TxError from 'models/TxError'
+import type TxExecModel from 'models/TxExecModel'
 
 export const DUCK_WATCHER = 'watcher'
 
@@ -50,7 +51,7 @@ export const txHandlingFlow = () => (dispatch) => {
     // const seconds = 10
     // console.warn('Simulated ' + seconds + ' seconds prolongation of tx mining')
     // await sleep(seconds)
-    return updatedTx
+    return tx
   }
 
   AbstractContractDAO.txGas = (tx: TxExecModel) => {
@@ -76,6 +77,8 @@ export const watcher = () => async (dispatch) => {
   dispatch(watchInitProfile())
   dispatch(initTokens())
   dispatch(initMainWallet())
+  // console.log('%c INIT MULTISIG', 'background: red; color: yellow')
+  // dispatch(initMultisigWalletManager())
   dispatch(watchPlatformManager())
   dispatch(watchInitTokens())
   dispatch(watchInitMonitor())
